Bomberlad Galaxy, notes for developers

Developers are strongly advised to keep this document up-to-date.

==================================================
1. Mapping Plane->Sphere
==================================================

The map is a square grid of tiles. The tile in the upper left-hand
corner has coordinates (0, 0).

Map-space is a two-dimensional space that is mapped onto a sphere.
Let mapSpace be the size of the map in map-space, i.e., the number
of tiles on one edge times the edge length of a tile.

Initially, the map tile (0, 0) has map-space coordinate
(-0.5 * mapSize, 0.5 * mapSize).

We call the rectangular region with corners
(-0.5 * mapSize, 0.5 * mapSize) and (0.5 * mapSize, -0.5 * mapSize)
the mapping domain.
The mapping domain is mapped (projected) onto a sphere.
Vertices outside the mapping domain are wrapped around.

The mapping function is based on the angular 360 fisheye projection.

The sphere can be "rotated" by moving the map origin.

==================================================
2. CollisionMap, CollisionPlayer
==================================================

Besides the spherical map that is seen by the players, there also exist a
hidden, planar collision map. The collision map contains collision blocks and
the collision player.
A collision block is essentially a collider.  The collision player is the
player gameobject of the network manager and has a character controller and a
network transform attached to it. That is, the collision player is the
"localClient" whose transform is synced over the network.
The idea is to leverage Unity's built-in physics and networking facilities
to sync the collision player and then transfer its position on the actual
game character.

Unfortunately, the character controller component assumes that gravity acts
along the negative y-axis, so we need to convert between "collision
coordinates" in the xz-plane and "map coordinates" in the xy-plane.

In hindsight, it would have been better to define map coordinates with z=0.

Terminology: Objects that belong to the collision map are prefixed with Collision.
Objects on the visible, spherical map are prefixed with View.
Example: CollsionPlayer, ViewPlayer

WTF?!?
- in the editor's scene view, the mantle mesh of the collision blocks is fucked
up, because it is created in the same manner as the actual mantle mesh, but its
z-coordinates are not flipped in the shader.
